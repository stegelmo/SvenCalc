@model CalcViewModel

@{
    ViewData["Title"] = "Svens miniräknare";
}

@* Jag hade  sett "taghelpers" i någon demo innan Asp.net core först kom och önskade så att de fanns i gamla asp.net.
    I mina projekt har jag fått använda extensionsmetoder på @Html istället. Blir så mycket renare kod med dessa taghelpers :) *@

<div class="row">
    <div class="col-md-8 col-md-push-2">
        <form class="form-horizontal" method="post">
            <h2 style="display: inline-block">Svens minräknare </h2> @*<span class="">(@System.Globalization.CultureInfo.CurrentUICulture)</span>*@
            <hr />
            <div class="form-group">
                <label asp-for="NumberA" class="control-label col-sm-2 col-xs-12"></label>
                <div class="col-sm-6 col-xs-12">
                    <input type="text" asp-for="NumberA" class="form-control" placeholder="Ange första talet" />
                    <span asp-validation-for="NumberA" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group">
                <label asp-for="NumberB" class="control-label col-sm-2 col-xs-12"></label>
                <div class="col-sm-6 col-xs-12">
                    <input type="text" asp-for="NumberB" class="form-control" placeholder="Ange andra talet" />
                    <span asp-validation-for="NumberB" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group">
                @*<label asp-for="OperatorType" class="col-xs-12"></label>*@
                <div class="col-xs-12">

                    @* Stylar radioknapparna likt knappar *@
                    @* Om inte specen specifikt sagt radioknappar och en submitknapp hade jag ersatt detta med fyra submitknappar för de olika räknesätten istället *@
                    @foreach (var op in Model.ValidOperators)
                    {
                        <div class="radio-inline">
                            <input type="radio" asp-for="OperatorType" id="@op" value="@op" />
                            <label for="@op"> @Html.DisplayFor(i => op)</label>
                        </div>
                    }
                </div>
                <div class="col-sm-6 col-xs-12">
                    <span asp-validation-for="OperatorType" class="text-danger"></span>
                </div>
            </div>
            <div class="form-group">
                <div class="center-block col-sm-8 col-xs-12">
                    <input type="submit" value="Räkna" asp-action="Index" class="btn btn-block" />
                </div>
            </div>

            @* Kör på endast valideringsmeddelande på kontrollerna i detta exempel *@
            @*<div class="form-group">
                <div class=" col-xs-12">
                    <div asp-validation-summary="All"></div>
                </div>
            </div>*@

            <div class="form-group">
                <label asp-for="Result" class="control-label col-sm-2 col-xs-12"></label>
                <div class="col-sm-6 col-xs-12">
                    <div class="form-control-static">@Model.Result</div>
                </div>
            </div>
        </form>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
